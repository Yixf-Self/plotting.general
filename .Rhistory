df <- data.frame(expand.grid(1:5,1:5))
df
head(df);
df$z <- runif(nrow(df))
head(df)
df$grp <- rep(letters[1:2],length.out = nrow(df))
head(df)
ggplot(df,aes(x = Var1,y = Var2,fill = factor(grp),alpha = z)) +
geom_tile()
ggplot(df,aes(x = Var1,y = Var2,fill = factor(grp),alpha = z)) +
geom_tile() +
scale_fill_manual(values = c('red','blue'))
ggplot(df,aes(x = Var1,y = Var2,fill = factor(grp),alpha = z)) +
geom_tile() +
scale_fill_manual(values = c('red','blue'))
ggplot(df, aes(x = Var1, y = Var2, fill = factor(grp))) + geom_raster()
ggplot(df, aes(x = Var1, y = Var2, fill = factor(grp), alpha = z)) + geom_raster()
ggplot(df, aes(x = Var1, y = Var2, fill = factor(grp), alpha = z)) + geom_raster() + scale_fill_manual(values = c('red', 'blue'))
scale_colour_brewer(palette="RdYlBu")
?facet_wrap
d <- ggplot(diamonds, aes(carat, price, fill = ..density..)) +
xlim(0, 2) + stat_binhex(na.rm = TRUE) + theme(aspect.ratio = 1)
d + facet_wrap(~ color)
d + facet_wrap(~ color, ncol = 1)
d + facet_wrap(~ color, ncol = 4)
d + facet_wrap(~ color, nrow = 4)
d + facet_wrap(~ color, nrow = 1)
d + facet_wrap(~ color, nrow = 1) + theme(axis.title.x = element_text(angle = -90))
d + facet_wrap(~ color, nrow = 1) + theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5))
source('~/local/src/R/plotting.general/R/default.heatmap.theme.R', echo=TRUE)
mtcars$car <- rownames(mtcars)
create.heatmap(
data = mtcars,
x = 'car',
y = 'cyl',
xlab = '',
ylab = 'Number of Cylinders'
)
create.heatmap()
mtcars$car <- rownames(mtcars)
create.heatmap(
data = mtcars,
x = 'car',
y = 'cyl',
xlab = '',
ylab = 'Number of Cylinders'
)
source('~/local/src/R/plotting.general/R/default.heatmap.theme.R', echo=TRUE)
mtcars$car <- rownames(mtcars)
create.heatmap(
data = mtcars,
x = 'car',
y = 'cyl',
xlab = '',
ylab = 'Number of Cylinders'
)
source('~/local/src/R/plotting.general/R/default.heatmap.theme.R', echo=TRUE)
mtcars$car <- rownames(mtcars)
create.heatmap(
data = mtcars,
x = 'car',
y = 'cyl',
xlab = '',
ylab = 'Number of Cylinders'
)
mtcars
mtcars$car <- rownames(mtcars)
create.heatmap(
data = mtcars,
x = 'car',
y = 'cyl',
xlab = '',
ylab = 'Number of Cylinders'
)
mtcars$car <- rownames(mtcars)
create.heatmap(
data = mtcars,
x = 'car',
y = 'cyl',
xlab = '',
ylab = 'Number of Cylinders'
)
mtcars$car <- rownames(mtcars)
create.heatmap(
data = mtcars,
x = 'car',
y = 'cyl',
xlab = '',
ylab = 'Number of Cylinders'
)
head(mtcars);
mtcars$car <- rownames(mtcars)
create.heatmap(
data = mtcars,
x = 'car',
y = 'cyl',
xlab = '',
ylab = 'Number of Cylinders'
)
create.heatmap(
data = mtcars,
x = 'car',
y = 'cyl',
)
source('~/local/src/R/plotting.general/R/create.heatmap.R', echo=TRUE)
create.heatmap(
data = mtcars,
x = 'car',
y = 'cyl',
);
create.heatmap(
data = mtcars,
x = 'car',
y = 'cyl',
xlab = '',
ylab = 'Number of Cylinders'
)
source('~/local/src/R/plotting.general/R/default.heatmap.theme.R', echo=TRUE)
create.heatmap(
data = mtcars,
x = 'car',
y = 'cyl',
xlab = '',
ylab = 'Number of Cylinders'
)
create.heatmap(
data = mtcars,
x = 'car',
y = 'cyl',
xlab = '',
ylab = 'Number of Cylinders'
)
source('~/local/src/R/plotting.general/R/create.heatmap.R', echo=TRUE)
create.heatmap(
data = mtcars,
x = 'car',
y = 'cyl',
xlab = '',
ylab = 'Number of Cylinders'
)
create.heatmap(
data = mtcars,
x = 'car',
y = 'cyl',
xlab = '',
ylab = 'Number of Cylinders'
)
create.heatmap(
data = mtcars,
x = 'car',
y = 'cyl',
xlab = '',
ylab = 'Number of Cylinders'
)
source('~/local/src/R/plotting.general/R/default.heatmap.theme.R', echo=TRUE)
create.heatmap(
data = mtcars,
x = 'car',
y = 'cyl',
xlab = '',
ylab = 'Number of Cylinders'
)
source('~/local/src/R/plotting.general/R/default.heatmap.theme.R', echo=TRUE)
create.heatmap(
data = mtcars,
x = 'car',
y = 'cyl',
xlab = '',
ylab = 'Number of Cylinders'
)
source('~/local/src/R/plotting.general/R/default.heatmap.theme.R', echo=TRUE)
library(devtools);
load_all(pkg = '.');
load_all(pkg = '.');
library(testthat);
test_dir('inst/tests');
auto_test(code_path = 'R', test_path = 'inst/tests')
clear
library(devtools);
library(testthat);
?load_all
load_all(pkg = '.')
auto_test(code_path = 'R', test_path = 'inst/tests');
source('inst/tests/test_createheatmap.R')
create.heatmap(
data = mtcars,
x = 'car',
y = 'cyl',
xlab = '',
ylab = 'Number of Cylinders'
)
auto_test(code_path = 'R', test_path = 'inst/tests');
mtcars$car <- rownames(mtcars)
create.heatmap(
data = mtcars,
x = 'car',
y = 'cyl',
xlab = '',
ylab = 'Number of Cylinders'
)
create.heatmap(
data = mtcars,
x = 'car',
y = 'cyl',
xlab = '',
ylab = 'Number of Cylinders'
)
create.heatmap(
data = mtcars,
x = 'car',
y = 'cyl',
xlab = '',
ylab = 'Number of Cylinders'
)
create.heatmap(
data = mtcars,
x = 'car',
y = 'cyl',
xlab = '',
ylab = 'Number of Cylinders'
)
source('~/local/src/R/plotting.general/R/create.heatmap.R', echo=TRUE)
source('~/local/src/R/plotting.general/R/create.heatmap.R', echo=TRUE)
create.heatmap(
data = mtcars,
x = 'car',
y = 'cyl',
xlab = '',
ylab = 'Number of Cylinders'
)
source('~/local/src/R/plotting.general/R/default.heatmap.theme.R', echo=TRUE)
default.heatmap.theme();
create.heatmap(
data = mtcars,
x = 'car',
y = 'cyl',
xlab = '',
ylab = 'Number of Cylinders'
)
source('~/local/src/R/plotting.general/R/create.heatmap.R', echo=TRUE)
create.heatmap(
data = mtcars,
x = 'car',
y = 'cyl',
xlab = '',
ylab = 'Number of Cylinders'
)
head(mtcars);
source('~/local/src/R/plotting.general/R/create.heatmap.R', echo=TRUE)
create.heatmap(
data = mtcars,
x = 'car',
y = 'cyl',
xlab = '',
ylab = 'Number of Cylinders'
)
create.heatmap(
data = mtcars,
x = 'car',
y = 'cyl',
xlab = '',
ylab = 'Number of Cylinders'
)
source('~/local/src/R/plotting.general/R/create.heatmap.R', echo=TRUE)
source('~/local/src/R/plotting.general/inst/tests/test_createheatmap.R', echo=TRUE)
source('~/local/src/R/plotting.general/R/create.heatmap.R', echo=TRUE)
source('~/local/src/R/plotting.general/inst/tests/test_createheatmap.R', echo=TRUE)
source('~/local/src/R/plotting.general/R/create.heatmap.R', echo=TRUE)
create.heatmap(
data = mtcars,
x = 'car',
y = 'cyl',
xlab = '',
ylab = 'Number of Cylinders'
)
source('~/local/src/R/plotting.general/R/create.heatmap.R', echo=TRUE)
create.heatmap(
data = mtcars,
x = 'car',
y = 'cyl',
xlab = '',
ylab = 'Number of Cylinders'
)
source('~/local/src/R/plotting.general/inst/tests/test_createheatmap.R', echo=TRUE)
source('~/local/src/R/plotting.general/R/create.heatmap.R', echo=TRUE)
source('~/local/src/R/plotting.general/R/create.heatmap.R', echo=TRUE)
source('~/local/src/R/plotting.general/R/default.heatmap.theme.R', echo=TRUE)
source('~/local/src/R/plotting.general/inst/tests/test_createheatmap.R', echo=TRUE)
source('~/local/src/R/plotting.general/inst/tests/test_createheatmap.R', echo=TRUE)
source('~/local/src/R/plotting.general/R/create.heatmap.R', echo=TRUE)
source('~/local/src/R/plotting.general/inst/tests/test_createheatmap.R', echo=TRUE)
source('~/local/src/R/plotting.general/inst/tests/test_createheatmap.R', echo=TRUE)
source('~/local/src/R/plotting.general/inst/tests/test_createheatmap.R', echo=TRUE)
load('~/local/src/R/ShlienLab.BiallelicMismatchRepair/data/bmmrd.rda')
head(bmmrd);
source('~/local/src/R/plotting.general/R/default.heatmap.theme.R', echo=TRUE)
load_all(pkg = '.');
load_all(pkg = '.');
create.histogram
create.scatterplot
create.histogram
create.heatmap
q()
library(ggplot2);
p <- ggplot(mtcars, aes(factor(cyl), mpg))
p + gome_boxplot()
p + geom_boxplot()
p + geom_boxplot() + theme_bw()
source('~/.active-rstudio-document', echo=TRUE)
create.boxplot(data = mtcars, x = 'cyl', y = 'mpg')
source('~/.active-rstudio-document', echo=TRUE)
create.boxplot(data = mtcars, x = 'cyl', y = 'mpg')
p + geom_boxplot() + theme_bw()
x <- 'mpg'
x <- 'cyl'
?aes_string
mtcars$mpg
mtcars$cyl
source('~/.active-rstudio-document', echo=TRUE)
str(mtcars)
data <- mtcars
data$cyl <- as.factor(data$cyl)
data$gear <- as.factor(data$gear);
str(data)
create.boxplot(data = data, aes_string(x = 'cyl', y = 'mpg'))
source('~/.active-rstudio-document', echo=TRUE)
create.boxplot(data = data, aes_string(x = 'cyl', y = 'mpg'))
source('~/.active-rstudio-document', echo=TRUE)
create.boxplot(data = data, aes_string(x = 'cyl', y = 'mpg'))
create.boxplot()
create.boxplot(data = data, aes_string(x = 'cyl', y = 'mpg'))
data$mpg
source('~/.active-rstudio-document', echo=TRUE)
ggplot(data = data, aes_string(x = 'cyl', y = 'mpg')) + geom_boxplot()
create.boxplot
create.boxplot(data = data, x = 'cyl', y = 'mpg')
source('~/.active-rstudio-document', echo=TRUE)
create.boxplot(data = data, x = 'cyl', y = 'mpg', xlab = 'Number of Cylinders', ylab = 'Miles per Gallon')
source('~/.active-rstudio-document', echo=TRUE)
create.boxplot(data = data, x = 'cyl', y = 'mpg', xlab = 'Number of Cylinders', ylab = 'Miles per Gallon')
?theme_bw
source('~/.active-rstudio-document', echo=TRUE)
create.boxplot(data = data, x = 'cyl', y = 'mpg', xlab = 'Number of Cylinders', ylab = 'Miles per Gallon')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
create.boxplot(data = data, x = 'cyl', y = 'mpg', xlab = 'Number of Cylinders', ylab = 'Miles per Gallon')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
create.boxplot(data = data, x = 'cyl', y = 'mpg', xlab = 'Number of Cylinders', ylab = 'Miles per Gallon')\
create.boxplot(data = data, x = 'cyl', y = 'mpg', xlab = 'Number of Cylinders', ylab = 'Miles per Gallon')
source('~/.active-rstudio-document', echo=TRUE)
create.boxplot(data = data, x = 'cyl', y = 'mpg', xlab = 'Number of Cylinders', ylab = 'Miles per Gallon')
create.boxplot(data = data, x = 'cyl', y = 'mpg', xlab = 'Number of Cylinders', ylab = 'Miles per Gallon')
gc()
getwd();
data <- read.table(file = '~/local/data/hsc/bmmrd/coverage/D291_2.realigned-recalibrated.coverage.txt', header = FALSE, sep = '\t', colClasses = c(rep('NULL', 7), 'numeric'))
ls()
head(data);
rm(data);
head(x)
rm x
rm(x)
p
rm(p);
getwd();
library(devtools);
load_all(pkg = '.')
mtcars$cyl <- factor(mtcars$cyl)
create.boxplot(data = mtcars, x = 'cyl', y = 'mpg', xlab = 'Number of Cylinders', ylab = 'Miles per Gallon')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
getwd();
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
theme_dendro
?as.dist
test1 <- c('blah1', 'blah2', 'blah3')
test2 <- c('blah2', 'blah3', 'blah4', 'blah5', 'blah6')
test1%in%test2
test[test1 %in% test2,]
test1[test1 %in% test2,]
test1 %in% test2
!(test1 %in% test2)
test1[!(test1 %in% test2)]
test1[test1 %in% test2]
?any
library(randomForest)
?randomForest
set.seed(71)
iris.rf <- randomForest(Species ~ ., data=iris, importance=TRUE,
proximity=TRUE)
head(iris.rf)
head(iris)
round(importance(iris.rf), 2)
unique(iris$Species)
iris.mds <- cmdscale(1 - iris.rf$proximity, eig=TRUE)
op <- par(pty="s")
pairs(cbind(iris[,1:4], iris.mds$points), cex=0.6, gap=0,
col=c("red", "green", "blue")[as.numeric(iris$Species)],
main="Iris Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(iris.mds$GOF)
## The `unsupervised' case:
set.seed(17)
iris.urf <- randomForest(iris[, -5])
MDSplot(iris.urf, iris$Species)
## stratified sampling: draw 20, 30, and 20 of the species to grow each tree.
(iris.rf2 <- randomForest(iris[1:4], iris$Species,
sampsize=c(20, 30, 20)))
set.seed(131)
ozone.rf <- randomForest(Ozone ~ ., data=airquality, mtry=3,
importance=TRUE, na.action=na.omit)
print(ozone.rf)
## Show "importance" of variables: higher value mean more important:
round(importance(ozone.rf), 2)
## "x" can be a matrix instead of a data frame:
set.seed(17)
x <- matrix(runif(5e2), 100)
y <- gl(2, 50)
(myrf <- randomForest(x, y))
(predict(myrf, x))
## "complicated" formula:
(swiss.rf <- randomForest(sqrt(Fertility) ~ . - Catholic + I(Catholic < 50),
data=swiss))
(predict(swiss.rf, swiss))
## Test use of 32-level factor as a predictor:
set.seed(1)
x <- data.frame(x1=gl(32, 5), x2=runif(160), y=rnorm(160))
(rf1 <- randomForest(x[-3], x[[3]], ntree=10))
## Grow no more than 4 nodes per tree:
(treesize(randomForest(Species ~ ., data=iris, maxnodes=4, ntree=30)))
source('~/local/src/R/plotting.general/R/create.stacked.barplot.R', echo=TRUE)
create.barplot(data = diamonds, x = 'clarity', fill = 'cut')
create.stacked.barplot(data = diamonds, x = 'clarity', fill = 'cut')
library(ggplot2)
create.stacked.barplot(data = diamonds, x = 'clarity', fill = 'cut')
create.stacked.barplot(data = diamonds, x = 'clarity', fill = 'cut', xlab = 'Diamond Clarity', ylab = 'Count')
create.stacked.barplot(data = diamonds, x = 'clarity', fill = 'cut', xlab = 'Diamond Clarity', ylab = 'Count', rotate = TRUE)
create.stacked.barplot(data = diamonds, x = 'clarity', fill = 'cut', xlab = 'Diamond Clarity', ylab = 'Count', rotate = TRUE, width = 0.3)
create.stacked.barplot(data = diamonds, x = 'clarity', fill = 'cut', xlab = 'Diamond Clarity', ylab = 'Count', rotate = TRUE, width = 1)
create.stacked.barplot(data = diamonds, x = 'clarity', fill = 'cut', xlab = 'Diamond Clarity', ylab = 'Count', rotate = TRUE, width = 0.8)
source('~/local/src/R/plotting.general/R/create.stacked.barplot.R', echo=TRUE)
create.stacked.barplot(data = diamonds, x = 'clarity', fill = 'cut', xlab = 'Diamond Clarity', ylab = 'Count', rotate = TRUE, width = 0.8, show.legend = FALSE)
source('~/.active-rstudio-document', echo=TRUE)
create.stacked.barplot(data = diamonds, x = 'clarity', fill = 'cut', xlab = 'Diamond Clarity', ylab = 'Count', rotate = TRUE, width = 0.8, show.legend = FALSE)
load_all(pkg = '.')
library(devtools)
load_all(pkg = '.')
head(mtcars)
create.stacked.barplot(data = mtcars, x = 'cyl', width = 1, fill = 'gear')
create.stacked.barplot(data = diamonds, x = 'clarity', width = 1, fill = 'cut')
create.stacked.barplot(data = diamonds, x = 'clarity', width = 0.9, fill = 'cut')
source('~/local/src/R/plotting.general/R/create.stacked.barplot.R', echo=TRUE)
create.stacked.barplot(data = diamonds, x = 'clarity', width = 0.9, fill = 'cut')
create.stacked.barplot(data = diamonds, x = 'clarity', width = 0.9, fill = 'cut', xlab = 'Diamond Clarity', ylab = 'Count', legend.show = FALSE)
create.stacked.barplot(data = diamonds, x = 'clarity', width = 0.9, fill = 'cut', xlab = 'Diamond Clarity', ylab = 'Count', show.legend = FALSE)
?facet_grid
head(diamond)
head(diamonds)
p <- ggplot(mtcars, aes(mpg, wt)) + geom_point()
# With one variable
p + facet_grid(. ~ cyl)
p <- ggplot(mtcars, aes(mpg, wt)) + geom_point()
# With one variable
p + facet_grid(cyl . ~)
p <- ggplot(mtcars, aes(mpg, wt)) + geom_point()
# With one variable
p + facet_grid(cyl ~ .)
p + facet_grid(vs ~ am)
source('~/local/src/R/plotting.general/R/create.stacked.barplot.R', echo=TRUE)
source('~/local/src/R/plotting.general/R/create.stacked.barplot.R', echo=TRUE)
head(diamonds);
create.stacked.barplot(data = diamonds, x = 'clarity', fill = 'cut', group.by = 'color')
create.stacked.barplot(data = diamonds, x = 'clarity', fill = 'cut', group.by = 'color', group = 'row')
group.by <- 'color'
length(group.by)
group.by[1]
source('~/local/src/R/plotting.general/R/create.stacked.barplot.R', echo=TRUE)
create.stacked.barplot(data = diamonds, x = 'clarity', fill = 'cut', group.by = 'color', group = 'row')
source('~/local/src/R/plotting.general/R/create.stacked.barplot.R', echo=TRUE)
create.stacked.barplot(data = diamonds, x = 'clarity', fill = 'cut', group.by = 'color', group = 'row')
source('~/local/src/R/plotting.general/R/create.stacked.barplot.R', echo=TRUE)
create.stacked.barplot(data = diamonds, x = 'clarity', fill = 'cut', group.by = 'color', group = 'row')
head(diamonds)
create.stacked.barplot(data = diamonds, x = 'clarity', fill = 'cut', group.by = c('color', 'carat'), group = 'row')
source('~/local/src/R/plotting.general/R/create.stacked.barplot.R', echo=TRUE)
create.stacked.barplot(data = diamonds, x = 'clarity', fill = 'cut', group.by = c('color', 'carat'), group = 'row')
source('~/local/src/R/plotting.general/R/create.stacked.barplot.R', echo=TRUE)
create.stacked.barplot(data = diamonds, x = 'clarity', fill = 'cut', group.by = c('color', 'carat'), group = 'row')
create.stacked.barplot(data = diamonds, x = 'clarity', fill = 'cut', group.by = c('clarity', 'carat'), group = 'row')
create.stacked.barplot(data = diamonds, x = 'clarity', fill = 'cut', group.by = c('clarity', 'carat'), group = 'row')
source('~/local/src/R/plotting.general/R/create.stacked.barplot.R', echo=TRUE)
create.stacked.barplot(data = diamonds, x = 'clarity', fill = 'cut', group.by = c('clarity', 'carat'), group = 'row')
create.stacked.barplot(data = diamonds, x = 'clarity', fill = 'cut', group.by = 'color', group = 'row')
create.stacked.barplot(data = diamonds, x = 'clarity', fill = 'cut', group.by = 'color', group = 'row', xlab = 'Clarity', ylab = 'Count')
create.stacked.barplot(data = diamonds, x = 'clarity', fill = 'cut', group.by = 'color', group = 'row', xlab = 'Clarity', ylab = 'Count', show.legend = FALSE)
create.stacked.barplot(data = diamonds, x = 'clarity', fill = 'cut', group.by = 'color', group = 'row', xlab = 'Clarity', ylab = 'Count')
q()
library(devtools);
load_all(pkg = '.')
getwd()
dir()
create.barplot
